Registro de cambios para login de emprendedor.

Nuevos componentes:

- SignUpFormEm.jsx
- SignInputsEm.jsx
- SignInFormEm.jsx
- LoginEm.jsx


1. Importaciones
Código Emprendedor: Importa SignInputsEm para los inputs, utiliza el value como parámetro, esto para poder limpiar y manejar los campos.
Código Usuario: Importa SignInputs, que parece ser un componente similar pero diferente.

2. Manejo de Profesiones
Código Emprendedor: Incluye un método fetchProfessions que obtiene profesiones de una API y las almacena en el estado.
Código Usuario: No tiene lógica para manejar profesiones. Esto significa que el formulario ahora está diseñado para un conjunto de profesiones predeterminado (e.g., professions_id inicia en '1').

3. Estructura de formData
Código Emprendedor: formData tiene más campos, incluyendo contact_number, contact_public, is_active, accounttype_id, y professions_id.
Código Usuario: formData es más simplificado y tiene valores predeterminados para contact_number y professions_id diferentes. Solo incluye campos necesarios para el registro.

4. Manejo de Cambios
Código Emprendedor: Almacena el valor de las contraseñas en formData sin encriptar, y después en el envío se encriptan.
Código Usuario: Encripta las contraseñas inmediatamente en handleChange y las guarda como tal en formData.

5. Validación del Formulario
Código Emprendedor: Realiza una validación más completa al revisar varios campos.
Código Usuario: Valida menos campos (no verifica contact_number, contact_public, o professions_id), haciendo la validación más sencilla.

6. Manejo del Envío
Código Emprendedor: Al enviar, las contraseñas se encriptan nuevamente.
Código Usuario: Se omite password_confirmation en el envío (const { password_confirmation, ...formDataToSubmit } = formData;), lo que es una práctica común y adecuada.

7. Errores de Estado
Código Emprendedor: Los errores son más detallados, abarcando más campos.
Código Usuario: Solo gestiona errores para campos de nombre, apellido, correo y contraseñas.

8. Imagen en el Formulario
Código Emprendedor: La imagen de fondo del lado derecho es "Register-Hombre.png".
Código Usuario: Usa "Register-Mujer.png" para el lado derecho.

9. Componente de Botón Genérico
Ambos fragmentos utilizan GenericButton, pero la configuración y uso son similares.

10. Estilo y Estructura de Renderizado
Ambos componentes renderizan una estructura similar, pero la implementación de errores y el manejo de inputs son ligeramente diferentes.


Resumen de Comentarios:

Importaciones: Se explican los componentes y bibliotecas que se importan.

Estado: Se documentan los estados utilizados en el formulario.

Efectos: Se detalla la función que carga las profesiones desde la API.

Manejo de Cambios: Se describen las funciones que manejan los cambios en los inputs.

Validación: Se explica la lógica detrás de la validación del formulario.

Envío del Formulario: Se comenta el proceso de envío, incluyendo la encriptación de contraseñas.

Reseteo del Formulario: Se detalla cómo se restablecen los campos después del envío exitoso.

Renderizado: Se explica cómo se estructura el JSX del formulario.